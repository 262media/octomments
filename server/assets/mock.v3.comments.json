[
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301944437",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301944437",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301944437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk0NDQzNw==",
    "user": {
      "login": "davidascher",
      "id": 51278,
      "node_id": "MDQ6VXNlcjUxMjc4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidascher",
      "html_url": "https://github.com/davidascher",
      "followers_url": "https://api.github.com/users/davidascher/followers",
      "following_url": "https://api.github.com/users/davidascher/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidascher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidascher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidascher/subscriptions",
      "organizations_url": "https://api.github.com/users/davidascher/orgs",
      "repos_url": "https://api.github.com/users/davidascher/repos",
      "events_url": "https://api.github.com/users/davidascher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidascher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-16T23:38:03Z",
    "updated_at": "2017-05-16T23:38:03Z",
    "author_association": "NONE",
    "body_html": "<p>I think the expected behavior is better because expected with that syntax.   The route walking behavior could be useful but I'd suggest looking for another syntax.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301945225",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301945225",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301945225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk0NTIyNQ==",
    "user": {
      "login": "ryanflorence",
      "id": 100200,
      "node_id": "MDQ6VXNlcjEwMDIwMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/100200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanflorence",
      "html_url": "https://github.com/ryanflorence",
      "followers_url": "https://api.github.com/users/ryanflorence/followers",
      "following_url": "https://api.github.com/users/ryanflorence/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanflorence/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanflorence/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanflorence/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanflorence/orgs",
      "repos_url": "https://api.github.com/users/ryanflorence/repos",
      "events_url": "https://api.github.com/users/ryanflorence/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanflorence/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-16T23:43:19Z",
    "updated_at": "2017-05-16T23:59:01Z",
    "author_association": "MEMBER",
    "body_html": "<p>Ah so maybe <code>&lt;Link to=\"../projects\"/&gt;</code> works on URL segments and <code>&lt;Link to=\"^^/projects\"/&gt;</code> could work on the parent route's path. Interesting.</p>\n<p>Not excited about inventing syntax though.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301951965",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301951965",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301951965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk1MTk2NQ==",
    "user": {
      "login": "alanhussey",
      "id": 383725,
      "node_id": "MDQ6VXNlcjM4MzcyNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/383725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alanhussey",
      "html_url": "https://github.com/alanhussey",
      "followers_url": "https://api.github.com/users/alanhussey/followers",
      "following_url": "https://api.github.com/users/alanhussey/following{/other_user}",
      "gists_url": "https://api.github.com/users/alanhussey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alanhussey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alanhussey/subscriptions",
      "organizations_url": "https://api.github.com/users/alanhussey/orgs",
      "repos_url": "https://api.github.com/users/alanhussey/repos",
      "events_url": "https://api.github.com/users/alanhussey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alanhussey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T00:32:37Z",
    "updated_at": "2017-05-17T00:32:37Z",
    "author_association": "NONE",
    "body_html": "<p>What about a separate prop that is mutually exclusive with <code>to</code>? Something like <code>&lt;Link upOneRoute&gt;</code>? Then you can avoid overloading the API. (another option: <code>&lt;Link up={count}&gt;</code>, to traverse more than one level)</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301953406",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301953406",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301953406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk1MzQwNg==",
    "user": {
      "login": "1000hz",
      "id": 1395018,
      "node_id": "MDQ6VXNlcjEzOTUwMTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1395018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1000hz",
      "html_url": "https://github.com/1000hz",
      "followers_url": "https://api.github.com/users/1000hz/followers",
      "following_url": "https://api.github.com/users/1000hz/following{/other_user}",
      "gists_url": "https://api.github.com/users/1000hz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1000hz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1000hz/subscriptions",
      "organizations_url": "https://api.github.com/users/1000hz/orgs",
      "repos_url": "https://api.github.com/users/1000hz/repos",
      "events_url": "https://api.github.com/users/1000hz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1000hz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T00:43:37Z",
    "updated_at": "2017-05-17T00:43:37Z",
    "author_association": "NONE",
    "body_html": "<p>I think going up a matched route would be a bad idea. 2 reasons I can think of off the top of my head:</p>\n<blockquote>\n<p>Notice .. doesn't go to \"invoice\" because that's not a route that will ever match.</p>\n</blockquote>\n<ol>\n<li>\n<p>I don't think you can make this claim when routes in v4 can be anywhere in the component tree.</p>\n</li>\n<li>\n<p>What happens when you decide to add a <code>&lt;Route path=\"invoice\" /&gt;</code> a few weeks later? Now you've inadvertently borked all your relative links.</p>\n</li>\n</ol>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301978025",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301978025",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301978025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk3ODAyNQ==",
    "user": {
      "login": "BTMPL",
      "id": 247153,
      "node_id": "MDQ6VXNlcjI0NzE1Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/247153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BTMPL",
      "html_url": "https://github.com/BTMPL",
      "followers_url": "https://api.github.com/users/BTMPL/followers",
      "following_url": "https://api.github.com/users/BTMPL/following{/other_user}",
      "gists_url": "https://api.github.com/users/BTMPL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BTMPL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BTMPL/subscriptions",
      "organizations_url": "https://api.github.com/users/BTMPL/orgs",
      "repos_url": "https://api.github.com/users/BTMPL/repos",
      "events_url": "https://api.github.com/users/BTMPL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BTMPL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T03:51:04Z",
    "updated_at": "2017-05-17T03:51:21Z",
    "author_association": "NONE",
    "body_html": "<p>I think your assumption in first post is wrong, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a></p>\n<p>Given URL like <code>/clients/invoice/123</code> the behavior is:</p>\n<table>\n<thead>\n<tr>\n<th>href</th>\n<th>url</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>payments</td>\n<td><code>/clients/invoice/payments</code></td>\n</tr>\n<tr>\n<td><code> </code> (empty <code>href</code> attribute)</td>\n<td><code>/clients/invoice/123</code></td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td><code>/clients/invoice</code></td>\n</tr>\n<tr>\n<td><code>..</code></td>\n<td><code>/clients</code></td>\n</tr>\n<tr>\n<td><code>../..</code></td>\n<td><code>/</code></td>\n</tr>\n</tbody>\n</table>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301986551",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301986551",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301986551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk4NjU1MQ==",
    "user": {
      "login": "pshrmn",
      "id": 1127037,
      "node_id": "MDQ6VXNlcjExMjcwMzc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1127037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pshrmn",
      "html_url": "https://github.com/pshrmn",
      "followers_url": "https://api.github.com/users/pshrmn/followers",
      "following_url": "https://api.github.com/users/pshrmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/pshrmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pshrmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pshrmn/subscriptions",
      "organizations_url": "https://api.github.com/users/pshrmn/orgs",
      "repos_url": "https://api.github.com/users/pshrmn/repos",
      "events_url": "https://api.github.com/users/pshrmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pshrmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T05:06:09Z",
    "updated_at": "2017-05-17T05:06:09Z",
    "author_association": "COLLABORATOR",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/BTMPL/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/BTMPL\">@BTMPL</a> Resolving here is going to be slightly different than how the browser treats hrefs. Before stripping the last segment, we ensure that the <code>pathname</code> ends in a trailing slash. That way only an empty string is stripped and we can treat <code>/clients/invoice/123</code> the same as <code>/clients/invoice/123/</code> (we get the segments <code>['clients', 'invoice', '123']</code>).</p>\n<p>The only tricky thing with that is that we have to keep track of if the original path had a trailing slash. I dealt with that in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"205330125\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/ReactTraining/react-router/issues/4459\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/ReactTraining/react-router/pull/4459/hovercard\" href=\"https://github.com/ReactTraining/react-router/pull/4459\">#4459</a> with <a href=\"https://github.com/pshrmn/react-router/blob/cd42cf65a2a7394bd6b234238f370df8d274ca80/packages/react-router/modules/resolveLocation.js#L32-L35\">this code</a> and <a href=\"https://github.com/pshrmn/react-router/blob/cd42cf65a2a7394bd6b234238f370df8d274ca80/packages/react-router/modules/__tests__/resolveLocation-test.js#L83-L103\">these tests</a> (which I think are correct, but I haven't reviewed them in a couple months).</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/301990686",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-301990686",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 301990686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTk5MDY4Ng==",
    "user": {
      "login": "BTMPL",
      "id": 247153,
      "node_id": "MDQ6VXNlcjI0NzE1Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/247153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BTMPL",
      "html_url": "https://github.com/BTMPL",
      "followers_url": "https://api.github.com/users/BTMPL/followers",
      "following_url": "https://api.github.com/users/BTMPL/following{/other_user}",
      "gists_url": "https://api.github.com/users/BTMPL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BTMPL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BTMPL/subscriptions",
      "organizations_url": "https://api.github.com/users/BTMPL/orgs",
      "repos_url": "https://api.github.com/users/BTMPL/repos",
      "events_url": "https://api.github.com/users/BTMPL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BTMPL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T05:37:23Z",
    "updated_at": "2017-05-17T05:37:23Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/pshrmn/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pshrmn\">@pshrmn</a> I understand that this is a decision aimed at new developers that might be unfamiliar with the URI syntax, but that's a step away from the specs.</p>\n<p>Also, Ryan's example was based on anchor tags, so I assumed spec compliant, not react-router variant and should follow the RFS - <a rel=\"nofollow\" href=\"https://tools.ietf.org/html/rfc1808#section-5\">https://tools.ietf.org/html/rfc1808#section-5</a></p>\n<p>Is there a real need for relative links other than not having to access <code>props.match.url</code> ?</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/302003181",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-302003181",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 302003181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjAwMzE4MQ==",
    "user": {
      "login": "mcrawshaw",
      "id": 12789086,
      "node_id": "MDQ6VXNlcjEyNzg5MDg2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12789086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcrawshaw",
      "html_url": "https://github.com/mcrawshaw",
      "followers_url": "https://api.github.com/users/mcrawshaw/followers",
      "following_url": "https://api.github.com/users/mcrawshaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcrawshaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcrawshaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcrawshaw/subscriptions",
      "organizations_url": "https://api.github.com/users/mcrawshaw/orgs",
      "repos_url": "https://api.github.com/users/mcrawshaw/repos",
      "events_url": "https://api.github.com/users/mcrawshaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcrawshaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T06:58:07Z",
    "updated_at": "2017-05-17T23:58:48Z",
    "author_association": "NONE",
    "body_html": "<p>The composability of React and RR4 are great.  I think when <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a> mentions the second option he is targeting 1st class support for this concept.  Allowing a component to ignore implementation details of its owner/parent, etc.</p>\n<p>Conceptually, I think it's useful to classify path segments in 2 seperate ways.  Navigation and parameter.  An example <code>/list/page2/item1/tab2</code>.  For the sake of discussion, <code>list</code> and <code>item1</code> are probably navigation segments (resulting in route matches and a rendered component), and <code>page2</code> and <code>tab2</code> are parameter segments (passed to the matching component).  I argue that navigation segments are often what we want to work with when discussion relative paths.  Parameter segments are often optional and can cause headaches.</p>\n<p>I'm not sure what the exact solution is, but my most common needs are as follows:</p>\n<ul>\n<li>Navigate down the tree, easy in any method, just append path to the existing one.  <strong>This is already possible with match.url, if a little verbose.</strong></li>\n<li>Navigate up the tree, almost always I want to go the parent match, never up one segment (possibly an parameter segment).  Option 1 sounds great, until you try to deal with optional parameter segments.  Think of trying to go up the tree from <code>/list</code> (page1 is the default) vs <code>/list/page2</code>.  <strong>There is currently no support for this in RR4.</strong></li>\n<li>Change parameter segments the same position in the navigation tree (i.e. component match).  Without getting the parent involved (e.g. send a rootPath prop) we need reference to a base match without parameter segments.  For example <code>to=\"./page2\"</code> would always go to <code>/list/page2</code> regardless if coming from <code>/list</code> or <code>/list/page1</code>.  We can reconstruct a new path with only knowledge of the current components domain.  <strong>There is currently no support for this in RR4.</strong></li>\n</ul>\n<p>I believe this description keeps cohesion within the component.</p>\n<p>The unfortunate thing about this discussion is that you might have a completely different view if you use RR4 differently within your app.  But hoping this makes sense to as most people as possible.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/302004921",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-302004921",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 302004921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjAwNDkyMQ==",
    "user": {
      "login": "thomasvm",
      "id": 140572,
      "node_id": "MDQ6VXNlcjE0MDU3Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/140572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomasvm",
      "html_url": "https://github.com/thomasvm",
      "followers_url": "https://api.github.com/users/thomasvm/followers",
      "following_url": "https://api.github.com/users/thomasvm/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomasvm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomasvm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomasvm/subscriptions",
      "organizations_url": "https://api.github.com/users/thomasvm/orgs",
      "repos_url": "https://api.github.com/users/thomasvm/repos",
      "events_url": "https://api.github.com/users/thomasvm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomasvm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T07:07:29Z",
    "updated_at": "2017-05-17T07:07:29Z",
    "author_association": "NONE",
    "body_html": "<p>In <em>my</em> head <code>&lt;Link to=\"\" /&gt;</code> directly corresponds to <code>&lt;a href=\"\" /&gt;</code>, so I would the expect the <code>to</code> prop to behave in the same way as the a's <code>href</code>. If a relative link behaves differently in react-router than the html counterpart, then that is something and you'll probably will be explaining over and over and over again.</p>\n<p>Could the <em>alternative</em> behaviour be implemented in a dedicated component?</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/302006666",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-302006666",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 302006666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjAwNjY2Ng==",
    "user": {
      "login": "mcrawshaw",
      "id": 12789086,
      "node_id": "MDQ6VXNlcjEyNzg5MDg2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12789086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcrawshaw",
      "html_url": "https://github.com/mcrawshaw",
      "followers_url": "https://api.github.com/users/mcrawshaw/followers",
      "following_url": "https://api.github.com/users/mcrawshaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcrawshaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcrawshaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcrawshaw/subscriptions",
      "organizations_url": "https://api.github.com/users/mcrawshaw/orgs",
      "repos_url": "https://api.github.com/users/mcrawshaw/repos",
      "events_url": "https://api.github.com/users/mcrawshaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcrawshaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T07:16:46Z",
    "updated_at": "2017-05-17T07:17:17Z",
    "author_association": "NONE",
    "body_html": "<p>I agree <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/thomasvm/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/thomasvm\">@thomasvm</a>, except for needing a separate component.</p>\n<p>Especially with <code>..</code> as it has such an intuitive use (remove a single segment from the current url).  Changing it would require massive userland instruction.</p>\n<p>I don't believe <code>.</code> has the same familiarity.</p>\n<p>I think <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/davidascher/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davidascher\">@davidascher</a> suggestion is worth considering.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/302192657",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-302192657",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 302192657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjE5MjY1Nw==",
    "user": {
      "login": "pshrmn",
      "id": 1127037,
      "node_id": "MDQ6VXNlcjExMjcwMzc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1127037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pshrmn",
      "html_url": "https://github.com/pshrmn",
      "followers_url": "https://api.github.com/users/pshrmn/followers",
      "following_url": "https://api.github.com/users/pshrmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/pshrmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pshrmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pshrmn/subscriptions",
      "organizations_url": "https://api.github.com/users/pshrmn/orgs",
      "repos_url": "https://api.github.com/users/pshrmn/repos",
      "events_url": "https://api.github.com/users/pshrmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pshrmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T18:47:07Z",
    "updated_at": "2017-05-17T18:47:07Z",
    "author_association": "COLLABORATOR",
    "body_html": "<p>Relative links would be completely for convenience (i.e. not having to use <code>match.url</code> and string concatenation).</p>\n<p>I think that as long as the resolving behavior is well documented, I'm okay with being slightly different from how anchors resolve. The current URI spec seems mostly inspired by static file servers, where trailing slashes are normal (e.g. <code>/somewhere/</code> is really <code>/somewhere/index.html</code>). When they aren't, linking to child pages is annoying.</p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span></span>\n<span class=\"pl-c\">for example, with window.location.pathname = '/user/123',</span>\n<span class=\"pl-c\">you have to include the user id in a relative link</span>\n<span class=\"pl-c\"><span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123/edit<span class=\"pl-pds\">'</span></span>&gt;Edit&lt;/<span class=\"pl-ent\">a</span>&gt;</pre></div>\n<p>If we automatically insert a trailing slash, then we get the behavior that I feel like the resolving was originally built around. Maybe I'm just assuming that intention because it fits my argument, but RFC 1808 <em>was</em> written over 20 years ago.</p>\n<p>Also, while this behavior is different from how anchors resolve, it is consistent with how the terminal apears to resolve with <code>cd</code> (they may be appending the trailing slash, but visually the terminal does not show it).</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">~</span>/code $ <span class=\"pl-c1\">cd</span> forks\n<span class=\"pl-k\">~</span>/code/forks $ ls\nreact-router <span class=\"pl-c1\">history</span>\n<span class=\"pl-k\">~</span>/code/forks $ <span class=\"pl-c1\">cd</span> react-router\n<span class=\"pl-k\">~</span>/code/forks/react-router $ <span class=\"pl-c1\">cd</span> ../history\n<span class=\"pl-k\">~</span>/code/forks/history $</pre></div>\n<p>Anyways, I'm more of a fan of the segment-wise double dot resolving because it is more predictable. I can certainly see the appeal to match based resolving, but I feel like that might lead to weird edge cases.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/302193785",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-302193785",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 302193785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjE5Mzc4NQ==",
    "user": {
      "login": "BTMPL",
      "id": 247153,
      "node_id": "MDQ6VXNlcjI0NzE1Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/247153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BTMPL",
      "html_url": "https://github.com/BTMPL",
      "followers_url": "https://api.github.com/users/BTMPL/followers",
      "following_url": "https://api.github.com/users/BTMPL/following{/other_user}",
      "gists_url": "https://api.github.com/users/BTMPL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BTMPL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BTMPL/subscriptions",
      "organizations_url": "https://api.github.com/users/BTMPL/orgs",
      "repos_url": "https://api.github.com/users/BTMPL/repos",
      "events_url": "https://api.github.com/users/BTMPL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BTMPL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T18:51:31Z",
    "updated_at": "2017-05-17T18:51:31Z",
    "author_association": "NONE",
    "body_html": "<p>I would be a fan of this solution if react-router would enforce traling slashes but I don't think enforcing anything like that is what the devs want. Maybe adding a separate link component or a prop on the link component to change it to relative mode <em>is</em> the solution?</p>\n<blockquote>\n<p>Maybe I'm just assuming that intention because it fits my argument, but RFC 1808 was written over 20 years ago.</p>\n</blockquote>\n<p>Sure, but it's still in use today, and a lot of webdevs are used to how it works ;)</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/303845832",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-303845832",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 303845832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzg0NTgzMg==",
    "user": {
      "login": "lewisdiamond",
      "id": 1375600,
      "node_id": "MDQ6VXNlcjEzNzU2MDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1375600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lewisdiamond",
      "html_url": "https://github.com/lewisdiamond",
      "followers_url": "https://api.github.com/users/lewisdiamond/followers",
      "following_url": "https://api.github.com/users/lewisdiamond/following{/other_user}",
      "gists_url": "https://api.github.com/users/lewisdiamond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lewisdiamond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lewisdiamond/subscriptions",
      "organizations_url": "https://api.github.com/users/lewisdiamond/orgs",
      "repos_url": "https://api.github.com/users/lewisdiamond/repos",
      "events_url": "https://api.github.com/users/lewisdiamond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lewisdiamond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-24T20:43:20Z",
    "updated_at": "2017-05-24T20:43:57Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a><br>\nGiven <code>/clients/invoice/123</code>, a link to <code>payments</code> should definitely go to <code>/clients/invoice/payments</code>, not what is suggested in the first post.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/BTMPL/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/BTMPL\">@BTMPL</a><br>\nGiven <code>/clients/invoice/123</code>, <code>.</code> should not go to <code>/clients/invoice</code> but rather <code>/clients/invoice/</code> (trailing slash, same goes for your <code>..</code> example)</p>\n<p>Why not follow standards?</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/305389214",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-305389214",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 305389214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM4OTIxNA==",
    "user": {
      "login": "binki",
      "id": 82626,
      "node_id": "MDQ6VXNlcjgyNjI2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/82626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/binki",
      "html_url": "https://github.com/binki",
      "followers_url": "https://api.github.com/users/binki/followers",
      "following_url": "https://api.github.com/users/binki/following{/other_user}",
      "gists_url": "https://api.github.com/users/binki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/binki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/binki/subscriptions",
      "organizations_url": "https://api.github.com/users/binki/orgs",
      "repos_url": "https://api.github.com/users/binki/repos",
      "events_url": "https://api.github.com/users/binki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/binki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T04:57:53Z",
    "updated_at": "2017-06-01T04:57:53Z",
    "author_association": "NONE",
    "body_html": "<p>I came to this bug researching how to write relative <code>&lt;Route/&gt;</code> with react-router because I don’t get how nesting would make sense without support for relative routes. I was surprised that this is not a feature yet.</p>\n<p>Maybe links could just <em>not</em> support <code>..</code>. If you’re trying to navigate to a different page in the app which requires going <em>up</em>, that means your <code>&lt;Link/&gt;</code> <strong>implies it knows the structure of its parent components</strong>. Requiring components to know where they will be called from seems to work against the ideal react components data flow.</p>\n<p>By <strong>disallowing</strong> <code>..</code>, you could encourage in the docs for authors to pass down absolute link generators which may themselves be built from relative contexts. For example, a demonstration of a component knowing only about <code>&lt;Routes/&gt;</code> it manages and passing the necessary information to other components which might want to link to routes it manages:</p>\n<div class=\"highlight highlight-source-js-jsx\"><pre>&lt;<span class=\"pl-ent\">Route</span> <span class=\"pl-e\">path</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>a/:aParam1/:aParam2<span class=\"pl-pds\">'</span></span> <span class=\"pl-e\">render</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-smi\">routeProps</span> <span class=\"pl-k\">=&gt;</span> &lt;SubComponentA aParam1={routeProps.match.params.aParam1} aParam2={routeProps.match.params.aParam2}/&gt;}/&gt;\n&lt;<span class=\"pl-ent\">Route</span> <span class=\"pl-e\">path</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span> <span class=\"pl-e\">render</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-smi\">routeProps</span> <span class=\"pl-k\">=&gt;</span> &lt;SubComponentB buildALink={(aParam1, aParam2) =&gt; routeProps.match.url + '/' + ['a', aParam1, aParam2].map(encodeURIComponent).join('/')}/&gt;}&gt;</pre></div>\n<p>I think this sort of pattern enables you to write components that can use <code>&lt;Route/&gt;</code> without knowing about the structure of any components containing them. If you change any <code>&lt;Route/&gt;</code> in this component, you can immediately see all dependencies on that <code>&lt;Route/&gt;</code> and fix your link builders from one spot. This pattern is not enforced if the concept of <code>..</code> is supported by relative <code>&lt;Link/&gt;</code>s because developers will take that shortcut.</p>\n<p>Sorry if this isn’t coherent or isn’t quite on topic. My demo also probably uses react-router incorrectly.</p>\n<p>P.S., I also find it confusing that baseUrl=<code>/clients/invoice/123</code> with url=<code>payments</code> resolves to <code>/clients/invoice/123/payments</code>. Everyone expects browser/standard URI behavior such as is supported by all the URI libraries out there:</p>\n<pre><code>&gt; require('url').resolve('/clients/invoice/123', 'payments')\n'/clients/invoice/payments'\n&gt; require('url').resolve('/clients/invoice/123/', 'payments')\n'/clients/invoice/123/payments'\n</code></pre>\n<p>However, route-relative URI support for <code>&lt;Link/&gt;</code> needs to be supported somehow for the feature to be useful. I’d like if a relative <code>&lt;Link/&gt;</code> were to always be relative to the full matched route plus a <code>/</code>. As long as the documentation for relative <code>&lt;Link/&gt;</code> clearly states that it is relative to matched route plus <code>/</code>, I think that it won’t be too confusing. That way it would match the behavior of relative <code>&lt;Route/&gt;</code>, making it easy to build links to relative <code>&lt;Route/&gt;</code>. Just don’t tell people that relative <code>&lt;Link/&gt;</code> it is relative to the URI they see in their browser, say there’s an implicit <code>/</code> and ensure it’s easy to get the version of the URI with that implicit <code>/</code> from the <code>match</code> object that, e.g., includes optional parameters (by just placing extra consecutive <code>/</code>) if there isn’t already an API for that (<code>match.url</code> does not do this, so it is unusable for building relative links).</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/305390557",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-305390557",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 305390557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU1Nw==",
    "user": {
      "login": "binki",
      "id": 82626,
      "node_id": "MDQ6VXNlcjgyNjI2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/82626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/binki",
      "html_url": "https://github.com/binki",
      "followers_url": "https://api.github.com/users/binki/followers",
      "following_url": "https://api.github.com/users/binki/following{/other_user}",
      "gists_url": "https://api.github.com/users/binki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/binki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/binki/subscriptions",
      "organizations_url": "https://api.github.com/users/binki/orgs",
      "repos_url": "https://api.github.com/users/binki/repos",
      "events_url": "https://api.github.com/users/binki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/binki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T05:09:56Z",
    "updated_at": "2017-06-01T05:09:56Z",
    "author_association": "NONE",
    "body_html": "<p>I realized I made a mistake in <a href=\"https://github.com/ReactTraining/react-router/issues/5127#issuecomment-305389214\" data-hovercard-type=\"issue\" data-hovercard-url=\"/ReactTraining/react-router/issues/5127/hovercard\">my hypothetical relative <code>&lt;Route/&gt;</code>s demo</a>, sorry for spam. In rendering <code>SubComponentB</code> I need to refer to <code>this.props.match</code> when generating the URI builder, not <code>routeProps.match</code>. This way, the URI is relative to the example component rather than to my <code>b</code> route. Here’s the corrected version:</p>\n<div class=\"highlight highlight-source-js-jsx\"><pre>&lt;<span class=\"pl-ent\">Route</span> <span class=\"pl-e\">path</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>a/:aParam1/:aParam2<span class=\"pl-pds\">'</span></span> <span class=\"pl-e\">render</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-smi\">routeProps</span> <span class=\"pl-k\">=&gt;</span> &lt;SubComponentA aParam1={routeProps.match.params.aParam1} aParam2={routeProps.match.params.aParam2}/&gt;}/&gt;\n&lt;<span class=\"pl-ent\">Route</span> <span class=\"pl-e\">path</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span> <span class=\"pl-e\">render</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-smi\">routeProps</span> <span class=\"pl-k\">=&gt;</span> &lt;SubComponentB buildALink={(aParam1, aParam2) =&gt; this.props.match.url + '/' + ['a', aParam1, aParam2].map(encodeURIComponent).join('/')}/&gt;}&gt;</pre></div>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/306377239",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-306377239",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 306377239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjM3NzIzOQ==",
    "user": {
      "login": "mcrawshaw",
      "id": 12789086,
      "node_id": "MDQ6VXNlcjEyNzg5MDg2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12789086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcrawshaw",
      "html_url": "https://github.com/mcrawshaw",
      "followers_url": "https://api.github.com/users/mcrawshaw/followers",
      "following_url": "https://api.github.com/users/mcrawshaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcrawshaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcrawshaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcrawshaw/subscriptions",
      "organizations_url": "https://api.github.com/users/mcrawshaw/orgs",
      "repos_url": "https://api.github.com/users/mcrawshaw/repos",
      "events_url": "https://api.github.com/users/mcrawshaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcrawshaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T04:15:34Z",
    "updated_at": "2017-06-06T04:15:34Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/binki/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/binki\">@binki</a> I struggled a little to understand your example, but I agree with your point that we don't want sub-components making assumptions about their parent.  As for removing a relative '..' as an option, that would be a little draconian for me.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a> Have you had a chance to read the above comments?  Has your thinking progressed since opening this issue?</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/307479259",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-307479259",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 307479259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ3OTI1OQ==",
    "user": {
      "login": "pshrmn",
      "id": 1127037,
      "node_id": "MDQ6VXNlcjExMjcwMzc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1127037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pshrmn",
      "html_url": "https://github.com/pshrmn",
      "followers_url": "https://api.github.com/users/pshrmn/followers",
      "following_url": "https://api.github.com/users/pshrmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/pshrmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pshrmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pshrmn/subscriptions",
      "organizations_url": "https://api.github.com/users/pshrmn/orgs",
      "repos_url": "https://api.github.com/users/pshrmn/repos",
      "events_url": "https://api.github.com/users/pshrmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pshrmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T19:29:46Z",
    "updated_at": "2017-06-09T19:29:46Z",
    "author_association": "COLLABORATOR",
    "body_html": "<p>The fact that <code>history</code> already supports relative pathnames (I guess I knew that it does, but I never see it used, so I wasn't thinkingn about it before) means that there could be inconsistent behavior for relative links. Of course the point of React Router adding relative links is that we produce an absolute URI, but there isn't a great way to infer the difference strictly looking at the <code>pathname</code> string.</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/*</span> current <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> location = { pathname: '/user/12345', ... }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> match = { path: '/user/:id', url: '/user/12345', params: { id: '12345' }, ... }</span>\n<span class=\"pl-k\">&lt;</span>Link to<span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">match</span>.<span class=\"pl-smi\">params</span>.<span class=\"pl-c1\">id</span><span class=\"pl-pse\">}</span></span>/details<span class=\"pl-pds\">`</span></span>}<span class=\"pl-k\">&gt;</span>User Details<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Link<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> &lt;a href='/users/12345/details'&gt;User Details&lt;/a&gt;</span></pre></div>\n<p><a href=\"https://codesandbox.io/s/v2p23mM9V\" rel=\"nofollow\">demo</a></p>\n<p>With that approach, you still have to use the <code>match</code> properties to generate the relative link. For me, that defeats the point of implementing relative links.</p>\n<p>The two solutions that come to mind are to make a separate <code>&lt;RelativeLink&gt;</code> component or to add a prop to <code>&lt;Link&gt;</code> to differentiate between spec relative routing and segment relative routing. If we chose the former we would also need to write a <code>&lt;RelativeNavLink&gt;</code> which is not ideal.</p>\n<p>Instead I think that we could add a <code>spec</code> prop for people who want relative paths to be resolve according to spec. You could also have a <code>relative</code> prop that does segment relative routing when <code>true</code>. Both approaches have their benefits, and maybe I'm just being stubborn, but I would prefer to have segment relative routing be the default. I think that overall it looks cleaner.</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> location = { pathname: '/user/12345', ... }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> match = { path: '/user/:id', url: '/user/12345', params: { id: '12345' }, ... }</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> when adding additional segments, it is simpler to just write</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> the desired segment to add</span>\n<span class=\"pl-k\">&lt;</span>Link spec to<span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">match</span>.<span class=\"pl-smi\">params</span>.<span class=\"pl-c1\">id</span><span class=\"pl-pse\">}</span></span>/details<span class=\"pl-pds\">`</span></span>}<span class=\"pl-k\">&gt;</span>User Details<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Link<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span>Link to<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>details<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>User Details<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Link<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> both produce &lt;a href='/users/12345/details'&gt;User Details&lt;/a&gt;</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> when going to different segment on the same level, it is slightly simpler to</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> just write the segment value</span>\n<span class=\"pl-k\">&lt;</span>Link spec to<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>67890<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>Other User<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Link<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span>Link to<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>../67890<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>Other User<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Link<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> both produce &lt;a href='/users/67890'&gt;Other User&lt;/a&gt;</span></pre></div>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/315275438",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-315275438",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 315275438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI3NTQzOA==",
    "user": {
      "login": "mjackson",
      "id": 92839,
      "node_id": "MDQ6VXNlcjkyODM5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/92839?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjackson",
      "html_url": "https://github.com/mjackson",
      "followers_url": "https://api.github.com/users/mjackson/followers",
      "following_url": "https://api.github.com/users/mjackson/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjackson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjackson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjackson/subscriptions",
      "organizations_url": "https://api.github.com/users/mjackson/orgs",
      "repos_url": "https://api.github.com/users/mjackson/repos",
      "events_url": "https://api.github.com/users/mjackson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjackson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T05:43:36Z",
    "updated_at": "2017-07-14T05:43:36Z",
    "author_association": "MEMBER",
    "body_html": "<p>AFAIC we've already got a great story around relative <code>&lt;Link&gt;</code> and <code>&lt;Route&gt;</code> just using the <code>match</code> object.</p>\n<div class=\"highlight highlight-source-js-jsx\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Relative links build their to value using match.url</span>\n&lt;<span class=\"pl-ent\">Link</span> <span class=\"pl-e\">to</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-smi\"><span class=\"pl-smi\">match</span></span><span class=\"pl-k\">.</span><span class=\"pl-smi\">url</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/sub/path<span class=\"pl-pds\">'</span></span><span class=\"pl-pse\">}</span>&gt;relative link&lt;/<span class=\"pl-ent\">Link</span>&gt;\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Relative routes build their path using match.path (or match.url if they don't care about parent route's params)</span>\n&lt;<span class=\"pl-ent\">Route</span> <span class=\"pl-e\">path</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-smi\"><span class=\"pl-smi\">match</span></span><span class=\"pl-k\">.</span><span class=\"pl-smi\">path</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/sub/path<span class=\"pl-pds\">'</span></span><span class=\"pl-pse\">}</span> .../&gt;</pre></div>\n<p>I agree these aren't perfect yet because the string concat can get messy when there's a trailing <code>/</code> in the URL, but it's very explicit which I like.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/318577874",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-318577874",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 318577874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODU3Nzg3NA==",
    "user": {
      "login": "sohrabsaran",
      "id": 25150881,
      "node_id": "MDQ6VXNlcjI1MTUwODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25150881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohrabsaran",
      "html_url": "https://github.com/sohrabsaran",
      "followers_url": "https://api.github.com/users/sohrabsaran/followers",
      "following_url": "https://api.github.com/users/sohrabsaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohrabsaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohrabsaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohrabsaran/subscriptions",
      "organizations_url": "https://api.github.com/users/sohrabsaran/orgs",
      "repos_url": "https://api.github.com/users/sohrabsaran/repos",
      "events_url": "https://api.github.com/users/sohrabsaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohrabsaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-28T07:04:16Z",
    "updated_at": "2017-07-28T07:17:22Z",
    "author_association": "NONE",
    "body_html": "<p>Avoiding match.url in case of &lt;Route path={match.url+'/sub/path'} will be great.</p>\n<p>Instead of the above, if we were able to just say:</p>\n<pre><code>&lt;Route path='sub/path' matchEnd\n</code></pre>\n<p>...it will be easier (where 'matchEnd' is a keyword that the 'Route' component can read and process).</p>\n<p>I ran into this 'path does not match unless prefixed with match.url' issue and resolved it through a careful look at <a rel=\"nofollow\" href=\"https://reacttraining.com/react-router/web/example/basic\">https://reacttraining.com/react-router/web/example/basic</a></p>\n<p>I then went about removing all explicit pass-downs of props via:</p>\n<pre><code>render()\n{\n    return &lt;outerComponentTag {...this.props}  &gt;  ...   &lt;/outerComponentTag&gt; \n</code></pre>\n<p>(Before going through the example in detail, I had earlier tried to do prop pass-downs to check whether they somehow resolved the issue of the Route component not working).</p>\n<p>....but now after the cleanup of these explicit/brute-force prop pass-downs (they were generating errors in the browser console about unwanted props being passed to various components), the component where I render my Route, now complains that it cannot find 'match'!!!</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/321965166",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-321965166",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 321965166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk2NTE2Ng==",
    "user": {
      "login": "svicalifornia",
      "id": 134837,
      "node_id": "MDQ6VXNlcjEzNDgzNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/134837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/svicalifornia",
      "html_url": "https://github.com/svicalifornia",
      "followers_url": "https://api.github.com/users/svicalifornia/followers",
      "following_url": "https://api.github.com/users/svicalifornia/following{/other_user}",
      "gists_url": "https://api.github.com/users/svicalifornia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/svicalifornia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/svicalifornia/subscriptions",
      "organizations_url": "https://api.github.com/users/svicalifornia/orgs",
      "repos_url": "https://api.github.com/users/svicalifornia/repos",
      "events_url": "https://api.github.com/users/svicalifornia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/svicalifornia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-12T08:03:30Z",
    "updated_at": "2017-08-12T09:20:48Z",
    "author_association": "NONE",
    "body_html": "<p>Back in May (sorry, I'm late to this party), <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lewisdiamond/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lewisdiamond\">@lewisdiamond</a> suggested that <code>.</code> should go up a single URL segment but leave a trailing slash:</p>\n<blockquote>\n<p>Given <code>/clients/invoice/123</code>, <code>.</code> should not go to <code>/clients/invoice</code> but rather <code>/clients/invoice/</code></p>\n</blockquote>\n<p>I think he's right. This would mirror how regular web links work. As he also suggested, <code>..</code> would go up yet another level (e.g. <code>/clients/</code>), still leaving a trailing slash.</p>\n<p>I also see and desire the benefit of going up a whole matched route, as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a> proposed. But rather than using <code>..</code> for that (which would break people's expectations of how relative paths work), I suggest that we use <code>...</code> to traverse up a whole matched route.</p>\n<p>In summary, my proposal would be:</p>\n<ul>\n<li><code>.</code>: Remove characters from end of URL pathname until reaching a slash; leave the slash.</li>\n<li><code>..</code>: Same as <code>.</code>, but then remove the next token from the end of the URL, leaving the previous slash.</li>\n<li><code>...</code>: Remove the last matched route (which may be absolute or relative to its own parent route).</li>\n</ul>\n<p>If we leave trailing slashes for <code>.</code> and <code>..</code> as proposed above, then routes should also have an option (perhaps true by default?) to allow <code>exact</code> to match with or without a trailing slash.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/321966585",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-321966585",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 321966585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk2NjU4NQ==",
    "user": {
      "login": "sohrabsaran",
      "id": 25150881,
      "node_id": "MDQ6VXNlcjI1MTUwODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25150881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohrabsaran",
      "html_url": "https://github.com/sohrabsaran",
      "followers_url": "https://api.github.com/users/sohrabsaran/followers",
      "following_url": "https://api.github.com/users/sohrabsaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohrabsaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohrabsaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohrabsaran/subscriptions",
      "organizations_url": "https://api.github.com/users/sohrabsaran/orgs",
      "repos_url": "https://api.github.com/users/sohrabsaran/repos",
      "events_url": "https://api.github.com/users/sohrabsaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohrabsaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-12T08:36:40Z",
    "updated_at": "2017-08-12T08:36:40Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/svicalifornia/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/svicalifornia\">@svicalifornia</a> not too sure whether  '.' being used to <em>remove</em> part of the url matched so far, would really be an intuitive syntax in general...<br>\nRegarding the '...' syntax suggestion, do you mean to say that in place of:</p>\n<pre><code>&lt;Route path={match.url+'/sub/path'}\n</code></pre>\n<p>...we should be able to say:</p>\n<pre><code>&lt;Route path={'.../sub/path'}\n</code></pre>\n<p>...?<br>\nIf that's the case, then I like the suggestion; it looks nicer than the 'matchEnd' keyword suggestion I mentioned previously.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/321967386",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-321967386",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 321967386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk2NzM4Ng==",
    "user": {
      "login": "svicalifornia",
      "id": 134837,
      "node_id": "MDQ6VXNlcjEzNDgzNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/134837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/svicalifornia",
      "html_url": "https://github.com/svicalifornia",
      "followers_url": "https://api.github.com/users/svicalifornia/followers",
      "following_url": "https://api.github.com/users/svicalifornia/following{/other_user}",
      "gists_url": "https://api.github.com/users/svicalifornia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/svicalifornia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/svicalifornia/subscriptions",
      "organizations_url": "https://api.github.com/users/svicalifornia/orgs",
      "repos_url": "https://api.github.com/users/svicalifornia/repos",
      "events_url": "https://api.github.com/users/svicalifornia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/svicalifornia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-12T08:54:55Z",
    "updated_at": "2017-08-12T08:58:33Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/sohrabsaran/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sohrabsaran\">@sohrabsaran</a> Not quite. As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a> proposed at the top of this thread:</p>\n<blockquote>\n<p>Instead of <code>&lt;Route path={match.path + '/more/stuff'}/&gt;</code> you could simply do <code>&lt;Route path=\"more/stuff\"/&gt;</code></p>\n</blockquote>\n<p>So you wouldn't need any prefix for that. Just simply use <code>\"relative/path\"</code>.</p>\n<p>My suggestion of <code>...</code> was in response to his request for comments:</p>\n<blockquote>\n<p>Going \"down\" as shown in the quick example up there is easy. But we're not sure what \"..\" should mean. There are two options for what it means: go up a URL segment, or go up a matched route.</p>\n</blockquote>\n<p>(See his post at the top of this thread for more context.)</p>\n<p>My proposal (echoing <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lewisdiamond/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lewisdiamond\">@lewisdiamond</a>) is that <code>.</code> and <code>..</code> should behave exactly as web links have worked for the last ~25 years:</p>\n<ul>\n<li><code>.</code>: Remove characters from end of URL pathname until reaching a slash; leave the slash (i.e. go to the \"current directory\" of the URL).</li>\n<li><code>..</code>: Same as <code>.</code>, but then remove the next token from the end of the URL, leaving the previous slash (i.e. go to the \"parent directory\" of the URL).</li>\n</ul>\n<p>And to support the use case offered by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a> to go up a whole matched path, I propose that we use <code>...</code>:</p>\n<ul>\n<li><code>...</code>: Remove the last matched parent route (which may be absolute or relative to its own parent route).</li>\n</ul>\n<p>For example, imaging we have a route <code>/users</code> with a component of <code>Users</code>. We would write that as:</p>\n<pre><code>&lt;Route path=\"/users\" component={Users} /&gt;\n</code></pre>\n<p>Now imagine that <code>Users</code> contains a long <code>Switch</code> of many user routes, including <code>/users/:id/profile/relationships</code>. Since we have already matched <code>/users</code> in the parent route, we could write a relative route like this:</p>\n<pre><code>&lt;Route path=\":id/profile/relationships\" component={UserRelationships} /&gt;\n</code></pre>\n<p>Then inside the render function of <code>UserRelationships</code>, we might want to link back to <code>Users</code>. So we could use <code>...</code> to remove the last matched route (<code>:id/profile/relationships</code>), returning us to <code>/users</code>:</p>\n<pre><code>&lt;Link to=\"...\"&gt;Users&lt;/Link&gt;\n</code></pre>\n<p>Or we could link to a different user's profile:</p>\n<pre><code>&lt;Link to={`.../${familyMember.id}/profile`}&gt;{familyMember.name}&lt;/Link&gt;\n</code></pre>\n<p>This is a somewhat contrived example, and you might structure the routes differently, but hopefully this shows how <code>...</code> would work and the benefit of having it in addition to <code>.</code> and <code>..</code>.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/321967745",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-321967745",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 321967745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk2Nzc0NQ==",
    "user": {
      "login": "svicalifornia",
      "id": 134837,
      "node_id": "MDQ6VXNlcjEzNDgzNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/134837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/svicalifornia",
      "html_url": "https://github.com/svicalifornia",
      "followers_url": "https://api.github.com/users/svicalifornia/followers",
      "following_url": "https://api.github.com/users/svicalifornia/following{/other_user}",
      "gists_url": "https://api.github.com/users/svicalifornia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/svicalifornia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/svicalifornia/subscriptions",
      "organizations_url": "https://api.github.com/users/svicalifornia/orgs",
      "repos_url": "https://api.github.com/users/svicalifornia/repos",
      "events_url": "https://api.github.com/users/svicalifornia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/svicalifornia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-12T09:02:18Z",
    "updated_at": "2017-08-12T09:25:16Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/sohrabsaran/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sohrabsaran\">@sohrabsaran</a> If you still doubt that <code>.</code> should behave as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lewisdiamond/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lewisdiamond\">@lewisdiamond</a> and I propose, then try this in any web page:</p>\n<pre><code>&lt;a href=\".\"&gt;Click Here&lt;/a&gt;\n</code></pre>\n<p>Open that file locally in Chrome and click the link, and you'll see that it removes the filename from the URL and takes you up to the directory path. It works the same way on a web server, and the web has worked that way since the 1990s.</p>\n<p>Following the existing conventions for relative paths in URLs will minimize developer confusion and increase adoption of this feature (as well as React and React Router). It's the right way to go.</p>\n<p>And with <code>...</code>, we can still traverse up matched routes and have the best of all worlds!</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/321996629",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-321996629",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 321996629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk5NjYyOQ==",
    "user": {
      "login": "sohrabsaran",
      "id": 25150881,
      "node_id": "MDQ6VXNlcjI1MTUwODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25150881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohrabsaran",
      "html_url": "https://github.com/sohrabsaran",
      "followers_url": "https://api.github.com/users/sohrabsaran/followers",
      "following_url": "https://api.github.com/users/sohrabsaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohrabsaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohrabsaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohrabsaran/subscriptions",
      "organizations_url": "https://api.github.com/users/sohrabsaran/orgs",
      "repos_url": "https://api.github.com/users/sohrabsaran/repos",
      "events_url": "https://api.github.com/users/sohrabsaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohrabsaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-12T18:03:25Z",
    "updated_at": "2017-08-12T18:03:25Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/svicalifornia/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/svicalifornia\">@svicalifornia</a> thanks for summarising the context of the thread. I came here while looking for a way to avoid having to mention match.url in '&lt;Route path='. I saw the last answer from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mjackson/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mjackson\">@mjackson</a>, that may have confused me about the exact scope of the opening post. I'll be more careful next time. So far I've avoided the need for '&lt;Link to=' by using a custom component that calls history.push().</p>\n<p>Agreed that 'no prefix' quite logically and concisely means that the given path is relative to match.url (the part of the url matched so far).</p>\n<p>Further, as suggested in the opening post, a Link's 'to' attribute when a relative path, is relative in the exact same way as a Route's 'path' attribute when a relative path. They are both considered as prefixed with match.url.</p>\n<p>So, I feel that it is logical and intuitive to consider a starting '..' as removing the end from match.url.  I can't seem to visualise any alternate interpretation!<br>\nIn summary, per my intuition:</p>\n<pre><code>&lt;Link to=\"../sub/path\"\n</code></pre>\n<p>...resolves to:</p>\n<pre><code>&lt;Link to=\"/match/dot/url/../sub/path\"\n</code></pre>\n<p>...that in turn resolves to:</p>\n<pre><code>&lt;Link to=\"/match/dot/sub/path\"\n</code></pre>\n<p>This is like the expected behavior of the 'cd' command on linux; given that the current directory contains two directories 'a' and 'b', if we say</p>\n<pre><code>cd a/../b\n</code></pre>\n<p>...we see that the current directory changes to 'b'. This may be tried out at a linux command prompt.</p>\n<p>So <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/svicalifornia/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/svicalifornia\">@svicalifornia</a>, can the following concern in the original post please be elaborated with an example (I take it that unlike me, you've understood the concern):</p>\n<blockquote>\n<p>Cons</p>\n<ul>\n<li>*Since any ol' route can match a location w/o a relationship with other Route's that match, a Link in one place can potentially have a completely different href than a link somewhere else--even though they have the same to prop <g-emoji class=\"g-emoji\" alias=\"grimacing\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png\">😬</g-emoji>. It all depends on the Route's path the Link is rendered within.</li>\n<li>It's against most people's intuition</li>\n</ul>\n</blockquote>\n<p>...?</p>\n<p>Do note that in the examples you've given, examples were given for '...' but not for '..'. Sorry for the bother, just trying to help to close out this one...</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/322021809",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-322021809",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 322021809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjAyMTgwOQ==",
    "user": {
      "login": "svicalifornia",
      "id": 134837,
      "node_id": "MDQ6VXNlcjEzNDgzNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/134837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/svicalifornia",
      "html_url": "https://github.com/svicalifornia",
      "followers_url": "https://api.github.com/users/svicalifornia/followers",
      "following_url": "https://api.github.com/users/svicalifornia/following{/other_user}",
      "gists_url": "https://api.github.com/users/svicalifornia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/svicalifornia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/svicalifornia/subscriptions",
      "organizations_url": "https://api.github.com/users/svicalifornia/orgs",
      "repos_url": "https://api.github.com/users/svicalifornia/repos",
      "events_url": "https://api.github.com/users/svicalifornia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/svicalifornia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-13T04:51:06Z",
    "updated_at": "2017-08-13T11:11:48Z",
    "author_association": "NONE",
    "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/sohrabsaran/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sohrabsaran\">@sohrabsaran</a> In traditional web links, the behavior of <code>.</code> and <code>..</code> at the start of a link href depends on the current page URL, specifically whether the current page URL ends in a slash:</p>\n<table>\n<thead>\n<tr>\n<th>If the current page URL is</th>\n<th>then <code>.</code> goes to</th>\n<th>and <code>..</code> goes to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>/some/directory/page.html</strong> <br> <em>(file path; <strong>no</strong> trailing slash)</em></td>\n<td>/some/directory/</td>\n<td>/some/</td>\n</tr>\n<tr>\n<td><strong>/some/directory/</strong> <br> <em>(directory path; trailing slash)</em></td>\n<td>/some/directory/</td>\n<td>/some/</td>\n</tr>\n<tr>\n<td><strong>/some/directory</strong> <br> <em>(directory path; <strong>no</strong> trailing slash)</em></td>\n<td>/some/</td>\n<td>/</td>\n</tr>\n</tbody>\n</table>\n<p>When the current URL path ends in slash, <code>.</code> goes to the same path, and <code>..</code> removes the last part of the path, as you said. However, when the current URL path does <strong>not</strong> end in slash, then <code>.</code> removes the last part of the path, and <code>..</code> removes the <strong>last two parts</strong> of the path.</p>\n<p>This behavior of relative links is defined in Internet standard <a href=\"https://tools.ietf.org/html/rfc1808\" rel=\"nofollow\">RFC 1808</a>, published in 1995. Netscape Navigator and Internet Explorer implemented relative web links this way back in the '90s, and web browsers have handled relative links exactly the same way since then.</p>\n<p>For traditional web sites, HTTP web servers usually take care standardizing directory URLs by <strong>redirecting</strong> any request to a directory URL <strong>without</strong> the trailing slash to the <strong>same URL but with the trailing slash added.</strong> This has the effect of adding a trailing slash to the web browser's address bar, so that all the relative links on the page will behave according to the URL ending in a trailing slash. This makes it easier for web developers to know how their relative links will work, because directory URLs will always end in a slash.</p>\n<p>It would be great if React Router could do something similar. While our routes don't correspond to directories on disk, they often do correspond to collections of items in a similar semantic sense. For example, we would expect a route with path <code>/products</code> to render a component listing a collection/directory of products. Semantically, this is very similar to a directory in the traditional web. Since we are using URL routing (with the same URL syntax defined by the traditional web), then we should probably use trailing slashes in our collection/directory routes, as in <code>/products/</code>.</p>\n<p>React Router could standardize our collection/directory URLs for us in much the same way that HTTP servers do, via a new <code>Route</code> property called <code>collection</code> or <code>directory</code>. This property would allow collection routes to match with or without the trailing slash and automatically add the trailing slash to the match URL (and perhaps to the browser's address bar, using <code>history.replace</code>).</p>\n<p>For relative links to be successfully adopted in React Router, they should behave exactly as relative links do on the traditional web, as defined in RFC 1808. To simplify this and avoid having to think about whether match URLs have trailing slashes, we should add a new <code>collection</code> / <code>directory</code> property on <code>Route</code> so that it can add the trailing slashes for us on the appropriate routes.</p>\n<p>Following these conventions will ensure that we are implementing relative links the same way that they have worked for over 20 years. Changing the expected behavior, even slightly, will introduce confusion and stumbling blocks for current and new developers alike, and I see no reason to do things differently when the existing conventions are known by millions of people and fairly easy to implement in React Router.</p>\n<p>The use case offered by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ryanflorence/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ryanflorence\">@ryanflorence</a> to go up a whole matched path (which may be one or more URL parts, absolute or relative to its own parent route) has no analogue in the traditional web. Therefore I think React Router should introduce a new path prefix <code>...</code> for this particular behavior. Many developers will never use this, since they are already familiar and happy with <code>..</code> and how it works on the web. But I can also see myself wanting to traverse up to the route of the parent component, without having to worry about how many URL parts were matched from there to the current component, and <code>...</code> would be a great addition to allow us to make that traversal with confidence.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/322531568",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-322531568",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 322531568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjUzMTU2OA==",
    "user": {
      "login": "adamdonahue",
      "id": 2406542,
      "node_id": "MDQ6VXNlcjI0MDY1NDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2406542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdonahue",
      "html_url": "https://github.com/adamdonahue",
      "followers_url": "https://api.github.com/users/adamdonahue/followers",
      "following_url": "https://api.github.com/users/adamdonahue/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdonahue/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdonahue/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdonahue/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdonahue/orgs",
      "repos_url": "https://api.github.com/users/adamdonahue/repos",
      "events_url": "https://api.github.com/users/adamdonahue/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdonahue/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T17:22:48Z",
    "updated_at": "2017-08-15T17:22:48Z",
    "author_association": "NONE",
    "body_html": "<p>Keep existing URL semantics is my vote.</p>"
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/322560036",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-322560036",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 322560036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjU2MDAzNg==",
    "user": {
      "login": "sohrabsaran",
      "id": 25150881,
      "node_id": "MDQ6VXNlcjI1MTUwODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25150881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohrabsaran",
      "html_url": "https://github.com/sohrabsaran",
      "followers_url": "https://api.github.com/users/sohrabsaran/followers",
      "following_url": "https://api.github.com/users/sohrabsaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohrabsaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohrabsaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohrabsaran/subscriptions",
      "organizations_url": "https://api.github.com/users/sohrabsaran/orgs",
      "repos_url": "https://api.github.com/users/sohrabsaran/repos",
      "events_url": "https://api.github.com/users/sohrabsaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohrabsaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T19:09:44Z",
    "updated_at": "2017-08-18T17:55:12Z",
    "author_association": "NONE",
    "body_html": ""
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/322568541",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-322568541",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 322568541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjU2ODU0MQ==",
    "user": {
      "login": "sohrabsaran",
      "id": 25150881,
      "node_id": "MDQ6VXNlcjI1MTUwODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25150881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohrabsaran",
      "html_url": "https://github.com/sohrabsaran",
      "followers_url": "https://api.github.com/users/sohrabsaran/followers",
      "following_url": "https://api.github.com/users/sohrabsaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohrabsaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohrabsaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohrabsaran/subscriptions",
      "organizations_url": "https://api.github.com/users/sohrabsaran/orgs",
      "repos_url": "https://api.github.com/users/sohrabsaran/repos",
      "events_url": "https://api.github.com/users/sohrabsaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohrabsaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T19:45:12Z",
    "updated_at": "2017-08-18T17:55:06Z",
    "author_association": "NONE",
    "body_html": ""
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/322615816",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-322615816",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 322615816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjYxNTgxNg==",
    "user": {
      "login": "svicalifornia",
      "id": 134837,
      "node_id": "MDQ6VXNlcjEzNDgzNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/134837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/svicalifornia",
      "html_url": "https://github.com/svicalifornia",
      "followers_url": "https://api.github.com/users/svicalifornia/followers",
      "following_url": "https://api.github.com/users/svicalifornia/following{/other_user}",
      "gists_url": "https://api.github.com/users/svicalifornia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/svicalifornia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/svicalifornia/subscriptions",
      "organizations_url": "https://api.github.com/users/svicalifornia/orgs",
      "repos_url": "https://api.github.com/users/svicalifornia/repos",
      "events_url": "https://api.github.com/users/svicalifornia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/svicalifornia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T23:22:19Z",
    "updated_at": "2017-08-18T17:54:27Z",
    "author_association": "NONE",
    "body_html": ""
  },
  {
    "url": "https://api.github.com/repos/ReactTraining/react-router/issues/comments/323173718",
    "html_url": "https://github.com/ReactTraining/react-router/issues/5127#issuecomment-323173718",
    "issue_url": "https://api.github.com/repos/ReactTraining/react-router/issues/5127",
    "id": 323173718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzE3MzcxOA==",
    "user": {
      "login": "sohrabsaran",
      "id": 25150881,
      "node_id": "MDQ6VXNlcjI1MTUwODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25150881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohrabsaran",
      "html_url": "https://github.com/sohrabsaran",
      "followers_url": "https://api.github.com/users/sohrabsaran/followers",
      "following_url": "https://api.github.com/users/sohrabsaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohrabsaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohrabsaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohrabsaran/subscriptions",
      "organizations_url": "https://api.github.com/users/sohrabsaran/orgs",
      "repos_url": "https://api.github.com/users/sohrabsaran/repos",
      "events_url": "https://api.github.com/users/sohrabsaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohrabsaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-17T19:40:56Z",
    "updated_at": "2017-08-18T17:54:07Z",
    "author_association": "NONE",
    "body_html": ""
  }
]
